/**
 * Session Types
 * TypeScript interfaces for jam session management
 * Story 7.2 - Supabase Realtime Service Layer
 */

/**
 * Participant in a jam session
 * Tracked via Supabase Realtime Presence API
 */
export interface Participant {
  /** Unique presence ID (auto-generated by Supabase) */
  id: string;

  /** User display name */
  name: string;

  /** Whether this user created the session */
  isHost: boolean;

  /** ISO timestamp when user joined */
  joinedAt: string;
}

/**
 * Session state synchronized across all participants
 * Transmitted via Supabase Realtime Broadcast API
 */
export interface SessionState {
  /** Tempo in BPM (40-300) */
  tempo: number;

  /** Global transport state */
  isPlaying: boolean;

  /** Musical key (optional, synced separately in Story 7.7) */
  key?: string;

  /** Scale pattern (optional, synced separately in Story 7.7) */
  scale?: string;
}

/**
 * Connection status for session service
 */
export type ConnectionStatus = 'connected' | 'connecting' | 'disconnected';

/**
 * Presence sync payload
 * Raw Supabase Presence state
 */
export interface PresenceState {
  [key: string]: {
    name: string;
    isHost: boolean;
    joinedAt: string;
  }[];
}

/**
 * Broadcast event types
 */
export type BroadcastEventType =
  | 'tempo-change'
  | 'playback-control'
  | 'key-change'
  | 'state-request'
  | 'state-response';

/**
 * Broadcast payload structure
 */
export interface BroadcastPayload {
  /** Tempo change event */
  tempo?: number;

  /** Playback control event */
  isPlaying?: boolean;

  /** Key/scale change event */
  key?: string;
  scale?: string;

  /** State request/response (Story 7.7) */
  requesterId?: string;
  sessionState?: SessionState;
}
